@page "/"
@using PDH.MessagingDemo.Web.Client
@rendermode InteractiveServer

@inject EventDispatcher<TestMessageReceivedEventArgs> Dispatcher
@inject Service Service

<h1>Blazor SignalR Chat Sample</h1>
<hr />

@if (!_isChatting)
{
    <p>
        Enter your name to start chatting:
    </p>

    <input type="text" maxlength="32" @bind="@_username" />
    <button type="button" @onclick="@Chat"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>
}
else
{
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
    </div>
    <div id="scrollbox">
        @foreach (var item in MessagesList)
        {
            @if (item.IsNotice)
            {
                <div class="alert alert-info">@item.Message</div>
            }
            else
            {
                <div class="@item.Css">
                    <div class="user">@item.User</div>
                    <div class="msg">@item.Message</div>
                </div>
            }
        }
        <hr />
        <textarea class="input-lg" placeholder="enter your comment" @bind="@_newMessage"></textarea>
        <button class="btn btn-default" @onclick="@(SendAsync)">Send</button>
    </div>
}
<style>
    /* improved for chat text box */
    textarea {
        border: 1px dashed #888;
        border-radius: 5px;
        width: 80%;
        overflow: auto;
        background: #f7f7f7
    }

    /* improved for speech bubbles */
    .received, .sent {
        position: relative;
        font-family: arial;
        font-size: 1.1em;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
    }

        .received:after, .sent:after {
            content: '';
            border: 20px solid transparent;
            position: absolute;
            margin-top: -30px;
        }

    .sent {
        background: #03a9f4;
        color: #fff;
        margin-left: 10%;
        top: 50%;
        text-align: right;
    }

    .received {
        background: #4CAF50;
        color: #fff;
        margin-left: 10px;
        margin-right: 10%;
    }

    .sent:after {
        border-left-color: #03a9f4;
        border-right: 0;
        right: -20px;
    }

    .received:after {
        border-right-color: #4CAF50;
        border-left: 0;
        left: -20px;
    }

    /* div within bubble for name */
    .user {
        font-size: 0.8em;
        font-weight: bold;
        color: #000;
    }

    .msg {
        /*display: inline;*/
    }
</style>

@code
{
    private bool _isChatting;

    private string? _username;

    private string? _newMessage;

    List<TestMessageReceivedEventArgs> MessagesList { get; } = new();

    protected override void OnInitialized()
    {
        Dispatcher.ReceivedMessage += MessageReceived;
    }

    private void MessageReceived(object? sender, TestMessageReceivedEventArgs message)
    {
        InvokeAsync(async () =>
        {
            MessagesList.Add(new TestMessageReceivedEventArgs(message.Message, message.User, _username == message.User));
            await InvokeAsync(StateHasChanged);
        });
    }

    private async Task SendAsync()
    {
        await Service.SendMessage(new(_newMessage!, _username!));
    }

    private void Chat(MouseEventArgs arg)
    {
        _isChatting = true;
    }
}

@page "/"
@page "/{ChatRoomId}"
@using Microsoft.AspNetCore.Authorization
@using PDH.MessagingDemo.Ui.Dtos
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [Authorize]

@inject EventDispatcher<TestMessageReceivedEventArgs> Dispatcher
@inject ChatService ChatService

<h1>Blazor SignalR Chat Sample</h1>
<hr />

@if (ChatRoomId is null)
{
    <p>
        Start chat with:
    </p>

    @if (_users != null)
    {
        foreach (var user in _users)
        {
            <p>@user</p>
            <button type="button" @onclick="@(async () => await StartChat(user))"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>
        }
    }
}
else
{
    <p>Hello @_userName</p>
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
    </div>
    <div id="scrollbox">
        @foreach (var item in MessagesList!)
        {
            @if (item.IsNotice)
            {
                <div class="alert alert-info">@item.Message</div>
            }
            else
            {
                <div class="@item.Css">
                    <div class="user">@item.User</div>
                    <div class="msg">@item.Message</div>
                </div>
            }
        }
        <hr />
        <textarea class="input-lg" placeholder="enter your comment" @bind="@_newMessage"></textarea>
        <button class="btn btn-default" @onclick="@(SendAsync)">Send</button>
    </div>
}

<style>
    /* improved for chat text box */
    textarea {
        border: 1px dashed #888;
        border-radius: 5px;
        width: 80%;
        overflow: auto;
        background: #f7f7f7
    }

    /* improved for speech bubbles */
    .received, .sent {
        position: relative;
        font-family: arial;
        font-size: 1.1em;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
    }

        .received:after, .sent:after {
            content: '';
            border: 20px solid transparent;
            position: absolute;
            margin-top: -30px;
        }

    .sent {
        background: #03a9f4;
        color: #fff;
        margin-left: 10%;
        top: 50%;
        text-align: right;
    }

    .received {
        background: #4CAF50;
        color: #fff;
        margin-left: 10px;
        margin-right: 10%;
    }

    .sent:after {
        border-left-color: #03a9f4;
        border-right: 0;
        right: -20px;
    }

    .received:after {
        border-right-color: #4CAF50;
        border-left: 0;
        left: -20px;
    }

    /* div within bubble for name */
    .user {
        font-size: 0.8em;
        font-weight: bold;
        color: #000;
    }

    .msg {
        /*display: inline;*/
    }
</style>

@code
{
    [Parameter]
    public string? ChatRoomId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    private List<MessageDto> MessagesList { get; set; } = new();

    private string? _username;

    private string? _newMessage;

    private string? _userName;


    private IEnumerable<string>? _users = new List<string>();


    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState is not null)
        {
            var state = await AuthenticationState;
            _userName = state.User.Identity?.Name ?? string.Empty;
            Dispatcher.ReceivedMessage += MessageReceived;
            if (ChatRoomId is not null)
            {
                var messages = await ChatService.GetChatroomMessages(ChatRoomId);
                MessagesList.AddRange(messages?.Select(x => new MessageDto
                {
                    User = x.User,
                    Message = x.Message,
                    Mine = x.User == _userName
                })!);
            }
            else
            {
                _users = await ChatService.GetUsers();
            }
        }
    }

    private void MessageReceived(object? sender, TestMessageReceivedEventArgs message)
    {
        InvokeAsync(async () =>
        {
            MessagesList!.Add(new MessageDto{Message = message.Message, User = message.User, Mine = message.Mine});
            await InvokeAsync(StateHasChanged);
        });
    }

    private async Task SendAsync()
    {
        await ChatService.SendMessage(ChatRoomId!, _newMessage!, _userName!);
    }

    private async Task StartChat(string user)
    {
        var id = await ChatService.CreateChatRoom(new List<string> { user, _userName! });
        ChatRoomId = id.ToString();
    }
}
